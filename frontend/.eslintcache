[{"/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/index.js":"1","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/App.js":"2","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/reportWebVitals.js":"3","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/Login.jsx":"4","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/NaverTest.jsx":"5","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/Test.jsx":"6","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/Join.jsx":"7","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/JoinConfirm.jsx":"8","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/errors/Error404.jsx":"9","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/components/main/Feed.jsx":"10","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/components/user/Forgot.jsx":"11","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/components/main/Post.jsx":"12","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/NicknameSetting.jsx":"13","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/components/user/KakaoLogin.jsx":"14","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/components/user/NaverLogin.jsx":"15"},{"size":643,"mtime":1627280646334,"results":"16","hashOfConfig":"17"},{"size":1362,"mtime":1627435120752,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1626777381104,"results":"19","hashOfConfig":"17"},{"size":4122,"mtime":1627349271302,"results":"20","hashOfConfig":"17"},{"size":455,"mtime":1627284259750,"results":"21","hashOfConfig":"17"},{"size":881,"mtime":1627284259751,"results":"22","hashOfConfig":"17"},{"size":5299,"mtime":1627349244574,"results":"23","hashOfConfig":"17"},{"size":476,"mtime":1627284259750,"results":"24","hashOfConfig":"17"},{"size":515,"mtime":1627284259749,"results":"25","hashOfConfig":"17"},{"size":1041,"mtime":1627440270959,"results":"26","hashOfConfig":"17"},{"size":136,"mtime":1627284259741,"results":"27","hashOfConfig":"17"},{"size":2277,"mtime":1627368308892,"results":"28","hashOfConfig":"17"},{"size":2599,"mtime":1627437680329,"results":"29","hashOfConfig":"17"},{"size":535,"mtime":1627284259741,"results":"30","hashOfConfig":"17"},{"size":659,"mtime":1627284259742,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ns0npg",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/index.js",[],"/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/App.js",[],"/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/reportWebVitals.js",[],"/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/Login.jsx",["69","70"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../../css/user/Login.css\";\nimport KakaoLogin from \"../../components/user/KakaoLogin\";\nimport NaverLogin from \"../../components/user/NaverLogin\";\n\nconst Login = ({ history }) => {\n  // state 선언\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [btnColorState, setBtnColorState] = useState(false); // 기본값 false\n  // 이메일 이벤트\n  const onChangeEmail = (e) => {\n    setEmail(e.target.value);\n  };\n  // 비밀번호 이벤트\n  const onChangePassword = (e) => {\n    setPassword(e.target.value);\n  };\n\n  // 로그인 버튼 이벤트\n  const onClickLogin = (e) => {\n    // 백엔드와 통신\n    history.push(\"/account/forgot\");\n  };\n\n  //이메일 유효성 검사\n  const isEmail = (email) => {\n    const emailRegex =\n      /^(([^<>()\\[\\].,;:\\s@\"]+(\\.[^<>()\\[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n\n    return emailRegex.test(email);\n  };\n  // 로그인 유효성 검사 후 btnColorState 값 변경\n  const btnChangeColor = () => {\n    isEmail(email) && password.length >= 5 ? setBtnColorState(true) : setBtnColorState(false);\n    console.log(btnColorState);\n  };\n\n  return (\n    <div className=\"wrap\">\n      <div className=\"container\">\n        <div className=\"inner\">\n          {/* <img className=\"logo\" src={namelogo} alt=\"Img not found :(\" /> */}\n          <div id=\"logo-name\">\n            <h2>mokomoko</h2>\n          </div>\n\n          {/* 로그인 입력 창 */}\n          <div className=\"login-form\">\n            <div className=\"login-id\">\n              <input\n                className=\"input-login\"\n                type=\"text\"\n                autoCapitalize=\"off\"\n                name=\"email\"\n                value={email}\n                placeholder=\"이메일\"\n                onChange={onChangeEmail}\n                onKeyUp={btnChangeColor}\n              />\n            </div>\n            <div className=\"login-pw\">\n              <input\n                className=\"input-password\"\n                type=\"password\"\n                name=\"password\"\n                value={password}\n                placeholder=\"비밀번호\"\n                onChange={onChangePassword}\n                onKeyUp={btnChangeColor}\n              ></input>\n            </div>\n            <div className=\"forgot-pw\">\n              <Link to=\"/account/forgot\">\n                <span>Forgot Password ?</span>\n              </Link>\n            </div>\n\n            <div className=\"submit\">\n              <button\n                id=\"btn-login\"\n                className={\"login-btn-\" + (btnColorState ? \"onColor\" : \"offColor\")}\n                type=\"button\"\n                onClick={onClickLogin}\n              >\n                로그인\n              </button>\n            </div>\n            {/* 로그인 푸터 */}\n\n            <div className=\"login-or\">\n              <hr className=\"leftHr\" />\n              <div className=\"or\">또는</div>\n              <hr className=\"rightHr\" />\n            </div>\n          </div>\n          <div className=\"login-footer\">\n            <NaverLogin />\n            <KakaoLogin />\n            {/* <button className=\"naver_Login\" aria-label=\"네이버로 로그인하기\" type=\"submit\">\n              <div className=\"inputContent\">\n                <span className=\"naverLogo\">\n                  <img src={naver_logo} alt=\"naver_logo\" />\n                </span>\n                <span>네이버로 로그인하기</span>\n              </div>\n            </button> */}\n            {/* <div className=\"social-login\">\n              <li>\n                <NaverLogin />\n              </li>\n              <li>\n                <KakaoLogin />\n              </li>\n            </div> */}\n          </div>\n          {/*  */}\n\n          <div className=\"toJoin\">\n            <span>mokomoko 회원이 아닌가요? </span>\n            <Link to=\"/account/Join\">\n              <span id=\"jointo\"> 지금 가입하세요.</span>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/NaverTest.jsx",["71","72"],"import React, { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst location = window.location;\nconst NaverTest = () => {\n  useEffect(() => {\n    console.log(token);\n  }, []);\n  if (!location.hash) return;\n  const token = location.hash.split(\"=\")[1].split(\"&\")[0];\n\n  return (\n    <div>\n      <h1>네이버 로그인 테스트 화면입니다.</h1>\n      <h3>{location.hash}</h3>\n    </div>\n  );\n};\n\nexport default NaverTest;\n","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/Test.jsx",[],"/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/Join.jsx",["73","74","75"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport JoinConfirm from \"./JoinConfirm\";\n\nimport \"../../css/user/Join.css\";\n\nconst Join = () => {\n  //state 선언\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordChk, setPasswordChk] = useState(\"\");\n  const [btnColorState, setBtnColorState] = useState(false); // 기본값 false\n\n  const [emailValidation, setEmailValidation] = useState(false);\n  const [passwordValidation, setPasswordValidation] = useState(false);\n  const [passwordChkValidation, setPasswordChkValidation] = useState(false);\n\n  useEffect(() => {\n    console.log(password);\n    console.log(passwordChk);\n  }, [password, passwordChk, passwordChkValidation]);\n\n  const onChangeEmail = (e) => {\n    setEmail(e.target.value);\n  };\n  // 비밀번호 이벤트\n  const onChangePassword = (e) => {\n    setPassword(e.target.value);\n  };\n\n  const onChangePasswordChk = (e) => {\n    setPasswordChk(e.target.value);\n  };\n\n  const btnChangeColor = () => {\n    //회원가입 유효성 검사 후 btnColorState값 변경\n    emailValidation && passwordValidation && password === passwordChk\n      ? setBtnColorState(true)\n      : setBtnColorState(false);\n  };\n\n  const onClickJoin = () => {\n    window.location.replace(\"/account/joinConfirm\");\n  };\n\n  //이메일 유효성 검사\n  const isEmail = () => {\n    // eslint-disable-next-line\n    const emailRegex =\n      /^(([^<>()\\[\\].,;:\\s@\"]+(\\.[^<>()\\[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n\n    if (emailRegex.test(email)) {\n      setEmailValidation(true);\n      btnChangeColor();\n    } else {\n      setEmailValidation(false);\n      btnChangeColor();\n    }\n  };\n\n  const isPassword = () => {\n    //조건1. 6~20 영문 대소문자\n    // 조건2. 최소 1개의 숫자 혹은 특수 문자를 포함해야 함\n\n    const passwordRegex = /^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{6,20}$/;\n\n    if (passwordRegex.test(password)) {\n      setPasswordValidation(true);\n      btnChangeColor();\n    } else {\n      setPasswordValidation(false);\n      btnChangeColor();\n    }\n  };\n\n  const isPasswordChk = () => {\n    if (password === passwordChk) {\n      setPasswordChkValidation(true);\n    } else {\n      setPasswordChkValidation(false);\n    }\n    btnChangeColor();\n  };\n\n  return (\n    <div className=\"wrap\">\n      <div className=\"container\">\n        <div className=\"inner\">\n          <div id=\"logo-name\">\n            <h2>mokomoko</h2>\n          </div>\n          {/* 회원가입 입력 창 */}\n          <div className=\"join-form\">\n            <div className=\"join-id\">\n              <input\n                className=\"input-joinid\"\n                type=\"text\"\n                autoCapitalize=\"off\"\n                name=\"email\"\n                value={email}\n                placeholder=\"이메일 주소\"\n                onChange={onChangeEmail}\n                onKeyUp={isEmail}\n              />\n              <div className={\"email-validation-\" + (emailValidation ? \"onColor\" : \"offColor\")}>\n                {emailValidation ? \"사용 가능한 아이디입니다.\" : \"이메일 형식이 잘못되었습니다.\"}\n              </div>\n            </div>\n            <div>\n              <input\n                className=\"input-joinpw\"\n                type=\"password\"\n                name=\"password\"\n                value={password}\n                placeholder=\"비밀번호\"\n                onChange={onChangePassword}\n                onKeyUp={isPassword}\n              />\n\n              <div\n                className={\"password-validation-\" + (passwordValidation ? \"onColor\" : \"offColor\")}\n              >\n                {passwordValidation\n                  ? \"괜찮은 비밀번호입니다.\"\n                  : \"6-20자 및 최소 1개의 숫자 혹은 특수 문자를 포함해주세요.\"}\n              </div>\n            </div>\n            <div>\n              <input\n                className=\"input-pwvali\"\n                type=\"password\"\n                name=\"passwordChk\"\n                value={passwordChk}\n                placeholder=\"비밀번호 확인\"\n                onChange={onChangePasswordChk}\n                onKeyUp={isPasswordChk}\n              />\n              <div\n                className={\n                  \"passwordChk-validation-\" + (passwordChkValidation ? \"onColor\" : \"offColor\")\n                }\n              >\n                {passwordChkValidation\n                  ? \"비밀번호 일치\"\n                  : \"상위에 입력한 비밀번호와 일치하지 않습니다.\"}\n              </div>\n            </div>\n            <div className=\"submit\">\n              <button\n                id=\"btn-join\"\n                className={btnColorState ? \"join-btn-active\" : \"join-btn-unactive\"}\n                type=\"button\"\n                onClick={onClickJoin}\n              >\n                회원가입\n              </button>\n            </div>\n            <div className=\"toLogin\">\n              <span>이미 계정이 있나요 ? </span>\n              <Link to=\"/account/Login\">\n                <span id=\"loginto\"> 로그인하기.</span>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Join;\n","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/JoinConfirm.jsx",["76"],"import React from \"react\";\n\nconst reSendEmail = () => {\n  console.log(\"이메일 재발송 이벤트\");\n};\n\nconst JoinConfirm = () => {\n  return (\n    <div>\n      <h1>회원가입 인증 메일이 발송되었습니다.</h1>\n      <h3>이메일을 확인해 주세요.</h3>\n      <div>\n        <a>이메일이 발송되지 않았나요? &nbsp;</a>\n        <button onClick={reSendEmail}>이메일 재발송</button>\n      </div>\n    </div>\n  );\n};\n\nexport default JoinConfirm;\n","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/errors/Error404.jsx",[],"/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/components/main/Feed.jsx",["77","78","79","80"],"import React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Post from \"./Post\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nconst Feed = () => {\n  const [posts, setPosts] = useState([]);\n\n  //   useEffect(() => {}); db연결시 활용\n\n  return (\n    <div className=\"feed-wrapper\">\n      <Row>\n        <Col></Col>\n        <Col className=\"main-col\">\n          <div className=\"feed\">\n            <Post\n              profilePhoto=\"\"\n              timestamp=\"2021.07.27(tue)\"\n              image=\"\"\n              username=\"jay\"\n              description=\"is it works ?\"\n            />\n          </div>\n        </Col>\n        <Col></Col>\n      </Row>\n    </div>\n\n    /* {posts.map((post) => ( */\n\n    // <Post\n    //   key={post.id}\n    //   profilePhoto={post.data.profilePhoto}\n    //   timestamp={post.data.timestamp}\n    //   image={post.data.image}\n    //   username={post.data.username}\n    //   description={post.data.description}\n    // />\n    //   ))}\n  );\n};\n\nexport default Feed;\n","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/components/user/Forgot.jsx",[],"/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/components/main/Post.jsx",["81"],"import { Avatar } from \"@material-ui/core\";\nimport FavoriteBorderOutlinedIcon from \"@material-ui/icons/FavoriteBorderOutlined\";\nimport ChatBubbleOutlinedIcon from \"@material-ui/icons/ChatBubbleOutlined\";\nimport BookmarkBorderOutlinedIcon from \"@material-ui/icons/BookmarkBorderOutlined\";\nimport React from \"react\";\nimport \"../../css/main/Post.css\";\nimport testImg from \"../../img/logo-back.png\";\n\nconst Post = (profilePhoto, image, username, description, timestamp) => {\n  return (\n    <div className=\"post\">\n      <div className=\"post-content\">\n        <div className=\"post-header\">\n          <Avatar className=\"post-avatar\" src={profilePhoto} />\n          <div className=\"post-info\">\n            <h3>{username}aaa</h3>\n            {/* <p className=\"upload-date\">{new Date(timestamp?.toDate()).toUTCString()}</p> */}\n          </div>\n        </div>\n        <div className=\"post-image\">\n          {/* <img src={image} alt=\"image\" /> */}\n          <img src={testImg} alt=\"image\" />\n        </div>\n\n        <div className=\"post-things\">\n          <div className=\"post-like\">\n            <FavoriteBorderOutlinedIcon fontSize=\"large\" />\n          </div>\n          <div className=\"post-comment\">\n            <ChatBubbleOutlinedIcon fontSize=\"large\" />\n          </div>\n          <div className=\"post-scrap\">\n            <BookmarkBorderOutlinedIcon fontSize=\"large\" />\n          </div>\n        </div>\n        <div className=\"likecnt\">\n          <p>좋아요 232,323개</p>\n        </div>\n        <div className=\"post-bottom\">\n          <p>\n            Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum\n            has been the industry's standard dummy text ever since the 1500s, when an unknown\n            printer took a galley of type and scrambled it to make a type specimen book. It has\n            survived not only five centuries, but also the leap into electronic typesetting,\n            remaining essentially unchanged. It was popularised in the 1960s with the release of\n            Letraset sheets containing Lorem Ipsum passages, and more recently with desktop\n            publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/pages/user/NicknameSetting.jsx",[],"/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/components/user/KakaoLogin.jsx",["82","83"],"import React from \"react\";\nimport \"../../css/user/KakaoLogin.css\";\n\nconst { Kakao } = window;\nconst loginWithKakao = () => {\n  console.log(\"hello\");\n  Kakao.Auth.authorize({\n    redirectUri: \"http://localhost:3000/kakaoLogin\",\n  });\n};\n\nconst KakaoLogin = () => {\n  return (\n    <div>\n      <button>\n        <a id=\"custom-login-btn\" onClick={loginWithKakao}>\n          <img src=\"//k.kakaocdn.net/14/dn/btqCn0WEmI3/nijroPfbpCa4at5EIsjyf0/o.jpg\" width=\"130\" />\n        </a>\n      </button>\n    </div>\n  );\n};\n\nexport default KakaoLogin;\n","/Users/jay/Desktop/Code/Project/S05P12D104/frontend/src/components/user/NaverLogin.jsx",[],{"ruleId":"84","severity":1,"message":"85","line":30,"column":17,"nodeType":"86","messageId":"87","endLine":30,"endColumn":18,"suggestions":"88"},{"ruleId":"84","severity":1,"message":"85","line":30,"column":40,"nodeType":"86","messageId":"87","endLine":30,"endColumn":41,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":21},{"ruleId":"94","severity":1,"message":"95","line":8,"column":6,"nodeType":"96","endLine":8,"endColumn":8,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"98","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":19},{"ruleId":"84","severity":1,"message":"85","line":50,"column":17,"nodeType":"86","messageId":"87","endLine":50,"endColumn":18,"suggestions":"99"},{"ruleId":"84","severity":1,"message":"85","line":50,"column":40,"nodeType":"86","messageId":"87","endLine":50,"endColumn":41,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":13,"column":9,"nodeType":"103","endLine":13,"endColumn":12},{"ruleId":"90","severity":1,"message":"104","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":19},{"ruleId":"90","severity":1,"message":"105","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":19},{"ruleId":"90","severity":1,"message":"106","line":8,"column":10,"nodeType":"92","messageId":"93","endLine":8,"endColumn":15},{"ruleId":"90","severity":1,"message":"107","line":8,"column":17,"nodeType":"92","messageId":"93","endLine":8,"endColumn":25},{"ruleId":"108","severity":1,"message":"109","line":22,"column":11,"nodeType":"103","endLine":22,"endColumn":44},{"ruleId":"101","severity":1,"message":"102","line":16,"column":9,"nodeType":"103","endLine":16,"endColumn":59},{"ruleId":"110","severity":1,"message":"111","line":17,"column":11,"nodeType":"103","endLine":17,"endColumn":100},"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["112","113"],["114","115"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["116"],"'JoinConfirm' is defined but never used.",["117","118"],["119","120"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'Container' is defined but never used.","'posts' is assigned a value but never used.","'setPosts' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"messageId":"121","fix":"122","desc":"123"},{"messageId":"124","fix":"125","desc":"126"},{"messageId":"121","fix":"127","desc":"123"},{"messageId":"124","fix":"128","desc":"126"},{"desc":"129","fix":"130"},{"messageId":"121","fix":"131","desc":"123"},{"messageId":"124","fix":"132","desc":"126"},{"messageId":"121","fix":"133","desc":"123"},{"messageId":"124","fix":"134","desc":"126"},"removeEscape",{"range":"135","text":"136"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"137","text":"138"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"139","text":"136"},{"range":"140","text":"138"},"Update the dependencies array to be: [token]",{"range":"141","text":"142"},{"range":"143","text":"136"},{"range":"144","text":"138"},{"range":"145","text":"136"},{"range":"146","text":"138"},[808,809],"",[808,808],"\\",[831,832],[831,831],[200,202],"[token]",[1419,1420],[1419,1419],[1442,1443],[1442,1442]]